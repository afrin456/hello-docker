# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java


pool:
  name: Default

stages:
- stage: Build
  displayName: Build Maven
  jobs:
  - job: BuildJob
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
    #jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'hello-docker-0.0.1-SNAPSHOT'
        publishLocation: 'Container'
    
    


- stage: ACR
  displayName: ACR Login
  jobs:
  - job: BuildJob
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'acr'
        command: 'login'


- stage: Docker
  displayName: Docker Build
  jobs:
  - job: BuildDockerImage
    steps:
    - task: CmdLine@2
      inputs:
        script: |
            cd $(Build.SourcesDirectory)
            cp ../a/hello-docker-0.0.1-SNAPSHOT.jar hello-docker-0.0.1-SNAPSHOT.jar
            
            sudo docker build . -t hellospring123.azurecr.io/hello-spring:$(Build.BuildId)
            #sudo docker run -d -p 8080:9080 -t hellospring123.azurecr.io/hello-spring:latest 
            sudo docker push hellospring123.azurecr.io/hello-spring:$(Build.BuildId)
            


- stage: HelmDeployment
  displayName: DeployHelm
  jobs:
  - job: BuildDockerImage
    steps:
    - task: CmdLine@2
      inputs:
        script: |
            cd $(Build.SourcesDirectory)
            az aks get-credentials --resource-group aks-ag-rg --name aks-ag
            helm install hello-spring hello-spring


